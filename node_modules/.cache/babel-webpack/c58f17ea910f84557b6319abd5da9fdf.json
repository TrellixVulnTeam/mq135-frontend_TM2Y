{"ast":null,"code":"import * as Chart from 'chart.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../../../core/services/gas.service\";\nimport * as i2 from \"../../gas-table/gas-table.component\";\nexport let GasMeterComponent = /*#__PURE__*/(() => {\n  class GasMeterComponent {\n    constructor(gasService) {\n      this.gasService = gasService;\n      this.chart = null;\n      this.intervalUpdate = null;\n      this.chart1 = null;\n    }\n\n    ngOnInit() {\n      // this.fetchLastRecordGas();\n      this.chart = new Chart('realtime', {\n        type: 'line',\n        data: {\n          labels: [],\n          datasets: [{\n            label: 'Data',\n            fill: false,\n            data: [],\n            backgroundColor: '#168ede',\n            borderColor: '#168ede'\n          }]\n        },\n        options: {\n          tooltips: {\n            enabled: false\n          },\n          legend: {\n            display: true,\n            position: 'bottom',\n            labels: {\n              fontColor: 'white'\n            }\n          },\n          scales: {\n            yAxes: [{\n              ticks: {\n                fontColor: \"white\"\n              }\n            }],\n            xAxes: [{\n              ticks: {\n                fontColor: \"white\",\n                beginAtZero: true\n              }\n            }]\n          }\n        }\n      });\n      console.log(this.lastRecordGas);\n      this.intervalUpdate = setInterval(function () {\n        this.fetchLastRecordGas();\n      }.bind(this), 1500);\n    }\n\n    ngOnDestroy() {\n      clearInterval(this.intervalUpdate);\n    }\n\n    fetchAllRecordsGas() {\n      // Al devolver un observable debemos suscribirnos.\n      this.gasService.getAllRecordsGas().subscribe(records => {\n        // console.log(products);\n        this.recordsGas = records;\n      }, error => {\n        console.error(\"ERROR: Unexpected response\");\n      });\n    }\n\n    fetchLastRecordGas() {\n      // Al devolver un observable debemos suscribirnos.\n      this.gasService.getLastRecordGas().subscribe(record => {\n        let chartTime = new Date();\n        chartTime = chartTime.getHours() + ':' + (chartTime.getMinutes() < 10 ? '0' + chartTime.getMinutes() : chartTime.getMinutes()) + ':' + (chartTime.getSeconds() < 10 ? '0' + chartTime.getSeconds() : chartTime.getSeconds());\n\n        if (this.chart.data.labels.length > 20) {\n          this.chart.data.labels.shift();\n          this.chart.data.datasets[0].data.shift();\n        }\n\n        this.chart.data.labels.push(chartTime);\n        this.chart.data.datasets[0].data.push(record.data_mq135);\n        this.chart.update();\n        this.lastRecordGas = record;\n      }, error => {\n        console.error(\"ERROR: Unexpected response\");\n      });\n      console.log('this.lastRecordGas: ');\n      console.log(this.lastRecordGas);\n    }\n\n  }\n\n  GasMeterComponent.ɵfac = function GasMeterComponent_Factory(t) {\n    return new (t || GasMeterComponent)(i0.ɵɵdirectiveInject(i1.GasService));\n  };\n\n  GasMeterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GasMeterComponent,\n    selectors: [[\"app-gas-meter\"]],\n    decls: 11,\n    vars: 1,\n    consts: [[1, \"card\"], [\"id\", \"realtime\"], [1, \"card-content\"]],\n    template: function GasMeterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"Medidor gas\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 0);\n        i0.ɵɵelementStart(3, \"canvas\", 1);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 2);\n        i0.ɵɵelementStart(6, \"h3\");\n        i0.ɵɵtext(7, \"Realtime\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"p\");\n        i0.ɵɵtext(9, \"Esta gr\\u00E1fica muestra informaci\\u00F3n en tiempo real\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"app-gas-table\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.chart);\n      }\n    },\n    directives: [i2.GasTableComponent],\n    styles: [\"[_nghost-%COMP%]{display:block;width:100%;text-align:center}.card[_ngcontent-%COMP%]{background-color:#424242;margin:10px auto;border-radius:5px;display:block;width:100%;width:800px;padding:12px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f}\"]\n  });\n  return GasMeterComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}